

*************** WATCH VIDEO *****************
https://www.youtube.com/watch?v=yYnX5QodqQ4
*********************************************

HOW TO IDENTIFY THE PIN NUMBERS ON THE RASPBERRY
https://www.raspberrypi.org/learning/physical-computing-with-python/worksheet/

Usual way is to
put pullup resistors on row connections
Set 3 GPIOs as outputs connected to column connections
Set four GPIOs as inputs connected to row connections
Have a programme scan round the columns by using a shifting 0 (low) pattern
After a short period of time read the row inputs
Any inputs that are low are switches that are on
The shifting 0 pattern means only ONE column GPIO output is low at any one time and you often write a pattern of all 1's between different column being 0

OR

It depends how GPIO rich you are. If you can spare 7 pins then connect each pin to a wire on the keypad. Either 4 outputs driving the rows and 3 inputs listening to the columns or the other way round.

If you are slightly more restricted with available pins then you can put a demux on the 4 row drive (74**138 3bit binary to 1 of 8 decoder/demux) saving 2 pins.
You can save another pin by binary encoding the column outputs....
Using pulldown resistors on the GPIO in and using diodes to generate and mix a binary signal...
column 1 diode to GPIO in 1,
column 2 diode to GPIO in 2,
column 3 diodes to GPIO in 1 and 2
Note that this can be confused by pressing a button on column 1 and 2.
So, thats down to 4 GPIO pins.

If you want to go further then with 2 pins column address out and the same pins as row data in with a 3rd pin output an enable signal then, with capacitors on the keypad outputs you could squeeze the requirements down to just 3 GPIO pins.

